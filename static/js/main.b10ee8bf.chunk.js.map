{"version":3,"sources":["hooks/use-viewport.tsx","components/app-bar/app-bar.tsx","components/command-bar/command-bar.tsx","hooks/use-toggle.tsx","App.tsx","components/json-editor/styles.ts","components/json-editor/components/error-message-bar/error-message-bar.tsx","components/json-editor/components/title-bar/title-bar.tsx","components/json-editor/components/tool-bar/tool-bar.tsx","components/json-editor/utils/file.tsx","components/json-editor/utils/json-string.tsx","components/json-editor/json-editor.tsx","components/json-editor/mock-data.ts","reportWebVitals.ts","index.tsx"],"names":["Viewport","AppBar","items","key","text","onRender","Text","variant","nowrap","block","CommandBar","styles","root","alignItems","ariaLabel","CommandBarComponent","isSchemaEditorOn","onSchemaEditorChange","isSchemaSampleDataOn","onSchemaSampleDataOn","leftItems","CommandButton","Checkbox","label","onChange","checked","useToggle","initialValue","React","useState","toggled","setToggled","toggle","useCallback","v","Editor","defaultValue","viewport","WIDE","vw","vh","ViewportContext","createContext","getDeviceConfig","width","PHONE","PHABLET","TABLET","DESKTOP","ViewportProvider","children","initialViewport","reqViewport","setViewport","viewportPX","setViewportPX","setCurrentViewport","currentViewport","setCurrentViewportPX","w","window","d","document","e","documentElement","g","getElementsByTagName","innerWidth","clientWidth","innerHeight","clientHeight","convertViewportTOpx","useEffect","initialViewportCS","calcViewport","newViewport","addEventListener","removeEventListener","Provider","value","BorderLine","classNames","mergeStyleSets","wrapper","height","position","headerStyle","padding","borderTop","onRenderDetailsHeader","props","defaultRender","Sticky","stickyPosition","StickyPositionType","Header","isScrollSynced","ErrorMessageBar","errors","map","error","uuid","problems","columns","name","length","fieldName","minWidth","maxWidth","isResizable","ScrollablePane","scrollbarVisibility","ScrollbarVisibility","auto","className","DetailsList","compact","checkboxVisibility","TitleBar","title","FileUploader","onFileHandle","inputFileRef","useRef","iconProps","iconName","onClick","current","click","ref","style","display","target","files","fileUploaded","type","accept","ToolBar","onMinifyClick","onPrettifyClick","isAutoPrettifyOn","onAutoPrettifyChange","onClearClick","onDownloadClick","onUploadClick","onFixClick","isValidJson","disabled","downloadJsonFile","jsonString","a","fileName","blob","Blob","navigator","msSaveOrOpenBlob","link","createElement","body","appendChild","URL","createObjectURL","href","download","removeChild","console","log","prettifyJsonString","JSON","stringify","parse","err","parseJsonSchemaString","stackStyles","borderRight","borderBottom","JSONEditor","schemaValue","path","monaco","useMonaco","setErrors","toggleAutoPrettifyOn","setIsValidJson","editorRef","updateEditorLayout","editor","layout","editorEl","_domElement","getBoundingClientRect","handleJsonSchemasUpdate","languages","json","jsonDefaults","setDiagnosticsOptions","validate","schemas","uri","location","fileMatch","schema","undefined","handleEditorPrettify","getAction","run","handleEditorUpdateValue","setValue","handleEditorValidation","markers","errorMessage","startLineNumber","message","hasContent","getValue","hasError","handleEditorChange","Stack","Item","minifiedValue","minifyJsonString","file","fileReader","FileReader","onload","result","readAsText","fixedValue","dirtyJson","formattedValue","grow","align","language","options","automaticLayout","autoClosingBrackets","autoClosingQuotes","formatOnPaste","formatOnType","scrollBeyondLastLine","onMount","getModel","updateOptions","tabSize","insertSpaces","beforeMount","onValidate","SampleData","containerStyle","editorStackStyle","getEditorClassNames","isFullWidth","App","toggleASchemaEditorOn","toggleSchemaSampleDataOn","setSchemaValue","viewportContext","context","useContext","Error","useViewport","wrap","horizontal","Schema","InputJson","AppContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","initializeIcons"],"mappings":"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","file":"static/js/main.b10ee8bf.chunk.js","sourcesContent":["import React, {\n  ReactNode,\n  useState,\n  useEffect,\n  createContext,\n  useContext,\n  useCallback,\n} from \"react\";\n\nenum Viewport {\n  PHONE = \"PHONE\",\n  PHABLET = \"PHABLET\",\n  TABLET = \"TABLET\",\n  DESKTOP = \"DESKTOP\",\n  WIDE = \"WIDE\",\n}\n\nconst defaultValue = {\n  viewport: Viewport.WIDE,\n  vw: 0,\n  vh: 0,\n};\n\ninterface UseViewPort {\n  viewport: Viewport;\n  vw: number;\n  vh: number;\n}\n\nconst ViewportContext = createContext(defaultValue);\n\nconst convertViewportTOpx = (): { vw: number; vh: number } => {\n  const w = window;\n  const d = document;\n  const e = d.documentElement;\n  const g = d.getElementsByTagName(\"body\")[0];\n  const x = w.innerWidth || e.clientWidth || g.clientWidth;\n  const y = w.innerHeight || e.clientHeight || g.clientHeight;\n  return {\n    vw: x,\n    vh: y,\n  };\n};\n\nconst getDeviceConfig = (width: number): Viewport => {\n  if (width < 400) {\n    return Viewport.PHONE;\n  }\n  if (width < 768) {\n    return Viewport.PHABLET;\n  }\n  if (width < 1024) {\n    return Viewport.TABLET;\n  }\n  if (width < 1536) {\n    return Viewport.DESKTOP;\n  }\n  return Viewport.WIDE;\n};\n\ntype ViewportProps = {\n  children: ReactNode;\n  // on the request (SSR) we detect using library 'mobile-detect', value is used for our initial state\n  reqViewport?: Viewport;\n};\n\ninterface ViewportPX {\n  vw: number;\n  vh: number;\n}\n\nconst ViewportProvider: React.FC<ViewportProps> = ({\n  children,\n  reqViewport,\n}) => {\n  const initialViewport = reqViewport || Viewport.WIDE;\n  const [viewport, setViewport] = useState<Viewport>(initialViewport);\n  const [viewportPX, setViewportPX] = useState<ViewportPX>({\n    vw: 0,\n    vh: 0,\n  });\n\n  const setCurrentViewport = useCallback(\n    (currentViewport: Viewport) => {\n      if (viewport !== currentViewport) {\n        setViewport(currentViewport);\n      }\n    },\n    [viewport]\n  );\n\n  const setCurrentViewportPX = () => setViewportPX(convertViewportTOpx());\n\n  useEffect(() => {\n    // initial state\n    const initialViewportCS = getDeviceConfig(window.innerWidth);\n    setCurrentViewport(initialViewportCS);\n\n    setCurrentViewportPX();\n\n    const calcViewport = () => {\n      const newViewport = getDeviceConfig(window.innerWidth);\n      setCurrentViewport(newViewport);\n      setCurrentViewportPX();\n    };\n\n    // add event listener\n    window.addEventListener(\"resize\", calcViewport);\n\n    // remove event listener\n    return () => {\n      window.removeEventListener(\"resize\", calcViewport);\n    };\n    // if we add viewport the whole setup of setting the event listener only once is gone\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ViewportContext.Provider\n      value={{\n        viewport,\n        ...viewportPX,\n      }}\n    >\n      {children}\n    </ViewportContext.Provider>\n  );\n};\n\nconst useViewport = (): UseViewPort => {\n  const context = useContext(ViewportContext);\n  if (context === defaultValue) {\n    throw new Error(\"useViewport is not used within a ViewportProvider\");\n  }\n  return context;\n};\n\ntype MockedViewportProps = {\n  children: ReactNode;\n  viewport?: Viewport;\n  viewportPX?: ViewportPX;\n};\n\nconst MockedViewportProvider: React.FC<MockedViewportProps> = ({\n  children,\n  viewport = Viewport.DESKTOP,\n  viewportPX = {\n    vw: 0,\n    vh: 0,\n  },\n}) => {\n  return (\n    <ViewportContext.Provider\n      value={{\n        viewport,\n        ...viewportPX,\n      }}\n    >\n      {children}\n    </ViewportContext.Provider>\n  );\n};\n\n// for testing purposes\nexport { MockedViewportProvider };\n\n// public api\nexport { useViewport, ViewportProvider, Viewport };\n\n// TEST\n// import React, { FC } from \"react\";\n// import { render, act } from \"@testing-library/react\";\n// import { renderHook } from \"@testing-library/react-hooks\";\n// import matchMediaPolyfill from \"mq-polyfill\";\n// import {\n//   useViewport,\n//   MockedViewportProvider,\n//   Viewport,\n//   ViewportProvider,\n// } from \"./viewport\";\n\n// describe(\"Viewport\", () => {\n//   beforeAll(() => {\n//     matchMediaPolyfill(window);\n//     window.resizeTo = function resizeTo(width, height) {\n//       Object.assign(this, {\n//         innerWidth: width,\n//         innerHeight: height,\n//         outerWidth: width,\n//         outerHeight: height,\n//       }).dispatchEvent(new this.Event(\"resize\"));\n//     };\n//   });\n\n//   const DummyView: FC = () => {\n//     const viewport = useViewport();\n//     return <div data-testid=\"view\">{viewport}</div>;\n//   };\n\n//   it(\"Provider works correctly\", async () => {\n//     const { queryByText } = render(\n//       <ViewportProvider reqViewport={Viewport.PHONE}>\n//         <DummyView />\n//       </ViewportProvider>\n//     );\n\n//     expect(queryByText(/PHONE/)).toBeDefined();\n\n//     act(() => {\n//       window.resizeTo(767, 1024);\n//     });\n\n//     expect(queryByText(/PHABLET/)).toBeDefined();\n\n//     act(() => {\n//       window.resizeTo(768, 1024);\n//     });\n\n//     expect(queryByText(/TABLET/)).toBeDefined();\n\n//     act(() => {\n//       window.resizeTo(1400, 1024);\n//     });\n\n//     expect(queryByText(/DESKTOP/)).toBeDefined();\n\n//     act(() => {\n//       window.resizeTo(1800, 1024);\n//     });\n\n//     expect(queryByText(/WIDE/)).toBeDefined();\n//   });\n\n//   it(\"useViewport hook can not be used without the ViewportProvider\", async () => {\n//     const { result } = renderHook(() => useViewport());\n//     expect(result.error.message).toBe(\n//       \"useViewport is not used within a ViewportProvider\"\n//     );\n//   });\n\n//   it(\"MockedProvider works correctly\", async () => {\n//     const { rerender, queryByText } = render(\n//       <MockedViewportProvider viewport={Viewport.PHONE}>\n//         <DummyView />\n//       </MockedViewportProvider>\n//     );\n\n//     expect(queryByText(/PHONE/)).toBeDefined();\n\n//     rerender(\n//       <MockedViewportProvider viewport={Viewport.DESKTOP}>\n//         <DummyView />\n//       </MockedViewportProvider>\n//     );\n\n//     expect(queryByText(/DESKTOP/)).toBeDefined();\n//   });\n// });\n","import React from \"react\";\n\nimport { CommandBar, ICommandBarItemProps, Text } from \"@fluentui/react\";\n\nexport const AppBar = (): JSX.Element => {\n  const items: ICommandBarItemProps[] = [\n    {\n      key: \"title\",\n      text: \"title\",\n      onRender: () => (\n        <Text variant=\"xLarge\" nowrap block>\n          JSON Online Editor\n        </Text>\n      ),\n    },\n  ];\n  return (\n    <CommandBar\n      styles={{\n        root: {\n          alignItems: \"center\",\n        },\n      }}\n      ariaLabel=\"app title\"\n      items={items}\n    />\n  );\n};\n","import React from \"react\";\n\nimport {\n  CommandBar,\n  CommandButton,\n  Checkbox,\n  // DefaultButton,\n  ICommandBarItemProps,\n  // IIconProps,\n} from \"@fluentui/react\";\n\nexport interface CommandBarComponentProps {\n  isSchemaEditorOn: boolean;\n  onSchemaEditorChange: () => void;\n  isSchemaSampleDataOn: boolean;\n  onSchemaSampleDataOn: () => void;\n}\n\nexport const CommandBarComponent: React.FC<CommandBarComponentProps> = ({\n  isSchemaEditorOn,\n  onSchemaEditorChange,\n  isSchemaSampleDataOn,\n  onSchemaSampleDataOn,\n}) => {\n  const leftItems: ICommandBarItemProps[] = [\n    {\n      key: \"use-json-schema\",\n      onRender: () => (\n        <CommandButton>\n          <Checkbox\n            label=\"Use JSON Schema\"\n            onChange={onSchemaEditorChange}\n            checked={isSchemaEditorOn}\n          />\n        </CommandButton>\n      ),\n    },\n    {\n      key: \"use-json-schema-sample-data\",\n      onRender: () =>\n        isSchemaEditorOn && (\n          <CommandButton>\n            <Checkbox\n              label=\"Use Sample Schema Data\"\n              onChange={onSchemaSampleDataOn}\n              checked={isSchemaSampleDataOn}\n            />\n          </CommandButton>\n        ),\n    },\n  ];\n\n  return (\n    <div>\n      <CommandBar\n        styles={{\n          root: {\n            alignItems: \"center\",\n          },\n        }}\n        items={leftItems}\n        // farItems={rightItems}\n        ariaLabel=\"json content commands\"\n      />\n    </div>\n  );\n};\n","import React from \"react\";\n\ntype CallbackType = (...args: string[]) => void;\n\nexport const useToggle = (initialValue = false): [boolean, () => void] => {\n  const [toggled, setToggled] = React.useState<boolean>(initialValue);\n  const toggle = React.useCallback<CallbackType>(() => {\n    setToggled((v) => !v);\n  }, []);\n  return [toggled, toggle];\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { Stack, IStackStyles, mergeStyleSets } from \"@fluentui/react\";\n\nimport { AppBar } from \"./components/app-bar\";\nimport { CommandBar } from \"./components/command-bar\";\nimport { JSONEditor } from \"./components/json-editor\";\nimport { SampleData } from \"./components/json-editor/mock-data\";\nimport { useToggle, useViewport, ViewportProvider } from \"./hooks\";\n\nenum Editor {\n  Schema = \"Schema\",\n  InputJson = \"Input Json\",\n}\n\n// Mutating styles definition\nconst containerStyle = (): IStackStyles => {\n  return {\n    root: {\n      height: \"100vh\",\n    },\n  };\n};\n\nconst editorStackStyle: IStackStyles = {\n  root: {\n    height: \"100%\",\n  },\n};\n\nexport const getEditorClassNames = ({\n  isFullWidth,\n}: {\n  isFullWidth: boolean;\n  vw: number;\n  vh: number;\n}) => {\n  return mergeStyleSets({\n    root: [\n      {\n        width: \"50%\",\n        height: \"100%\",\n      },\n      isFullWidth && {\n        width: \"100%\",\n        height: \"100%\",\n      },\n    ],\n  });\n};\n\nconst App = (): JSX.Element => {\n  const [isSchemaEditorOn, toggleASchemaEditorOn] = useToggle(false);\n  const [isSchemaSampleDataOn, toggleSchemaSampleDataOn] = useToggle(false);\n  const [schemaValue, setSchemaValue] = useState<string | undefined>(undefined);\n  const viewportContext = useViewport();\n  // const [containerCSS, setContainerCSS] = useState<IStackStyles>();\n  const { vh, vw } = viewportContext;\n\n  useEffect(() => {\n    if (!isSchemaEditorOn && isSchemaSampleDataOn) {\n      toggleSchemaSampleDataOn();\n    }\n  }, [isSchemaEditorOn, isSchemaSampleDataOn, toggleSchemaSampleDataOn]);\n\n  const handleSchemaValueChange = (value: string) => setSchemaValue(value);\n\n  const getSchemaValue = () =>\n    isSchemaSampleDataOn && !schemaValue ? SampleData.schema : schemaValue;\n\n  // useEffect(() => {\n  //   const vhTOpx = containerStyle(vh);\n  //   setContainerCSS(vhTOpx);\n  // }, [vh]);\n\n  return (\n    <ViewportProvider>\n      <Stack styles={containerStyle}>\n        <Stack.Item>\n          <AppBar />\n          <CommandBar\n            isSchemaEditorOn={isSchemaEditorOn}\n            onSchemaEditorChange={toggleASchemaEditorOn}\n            isSchemaSampleDataOn={isSchemaSampleDataOn}\n            onSchemaSampleDataOn={toggleSchemaSampleDataOn}\n          />\n        </Stack.Item>\n        <Stack wrap horizontal grow styles={editorStackStyle}>\n          {isSchemaEditorOn && (\n            <Stack.Item\n              styles={getEditorClassNames({\n                isFullWidth: !isSchemaEditorOn,\n                vh,\n                vw,\n              })}\n            >\n              <JSONEditor\n                title={Editor.Schema}\n                path=\"schema.json\"\n                defaultValue={\n                  isSchemaSampleDataOn ? SampleData.schema : undefined\n                }\n                onChange={handleSchemaValueChange}\n              />\n            </Stack.Item>\n          )}\n          <Stack.Item\n            styles={getEditorClassNames({\n              isFullWidth: !isSchemaEditorOn,\n              vh,\n              vw,\n            })}\n          >\n            <JSONEditor\n              title={isSchemaEditorOn ? Editor.InputJson : \"\"}\n              path=\"input_json.json\"\n              schemaValue={getSchemaValue()}\n              defaultValue={\n                isSchemaSampleDataOn ? SampleData.jsonInput : undefined\n              }\n            />\n          </Stack.Item>\n        </Stack>\n      </Stack>\n    </ViewportProvider>\n  );\n};\n\nconst AppContainer = (): JSX.Element => {\n  return (\n    <ViewportProvider>\n      <App />\n    </ViewportProvider>\n  );\n};\n\nexport default AppContainer;\n","export const BorderLine = \"1px solid rgb(237, 235, 233)\";\n","import React from \"react\";\n\nimport {\n  DetailsList,\n  ScrollablePane,\n  ScrollbarVisibility,\n  Sticky,\n  StickyPositionType,\n  mergeStyleSets,\n  IDetailsHeaderProps,\n  IRenderFunction,\n  IColumn,\n} from \"@fluentui/react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { BorderLine } from \"../../styles\";\n\ninterface ErrorMessageBarProps {\n  errors: string[];\n}\n\nconst classNames = mergeStyleSets({\n  wrapper: {\n    height: \"inherit\",\n    position: \"relative\",\n  },\n});\n\nconst headerStyle = {\n  root: {\n    padding: 0,\n    borderTop: BorderLine,\n  },\n};\n\nconst onRenderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (\n  props,\n  defaultRender\n) => {\n  if (!props) return null;\n  return (\n    <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced>\n      {defaultRender!({\n        ...props,\n        styles: headerStyle,\n      })}\n    </Sticky>\n  );\n};\n\nexport const ErrorMessageBar: React.FC<ErrorMessageBarProps> = ({\n  errors,\n}): JSX.Element => {\n  const items = errors.map((error) => ({\n    key: `error-${uuid()}`,\n    problems: error,\n  }));\n\n  const columns: IColumn[] = [\n    {\n      key: \"problems\",\n      name: `Problems (${errors.length})`,\n      fieldName: \"problems\",\n      minWidth: 300,\n      maxWidth: 300,\n      isResizable: true,\n    },\n  ];\n\n  return (\n    <ScrollablePane\n      scrollbarVisibility={ScrollbarVisibility.auto}\n      className={classNames.wrapper}\n    >\n      <DetailsList\n        compact\n        items={items}\n        columns={columns}\n        checkboxVisibility={2}\n        onRenderDetailsHeader={onRenderDetailsHeader}\n      />\n    </ScrollablePane>\n  );\n};\n","import React from \"react\";\n\nimport { CommandBar, ICommandBarItemProps, Text } from \"@fluentui/react\";\n\ninterface TitleBarProps {\n  title: string;\n}\nexport const TitleBar: React.FC<TitleBarProps> = ({ title }): JSX.Element => {\n  const items: ICommandBarItemProps[] = [\n    {\n      key: title,\n      text: title,\n      onRender: () => (\n        <Text variant=\"large\" nowrap block>\n          {title}\n        </Text>\n      ),\n    },\n  ];\n  return (\n    <CommandBar\n      styles={{\n        root: {\n          alignItems: \"center\",\n        },\n      }}\n      ariaLabel=\"app title\"\n      items={items}\n    />\n  );\n};\n","import React, { useRef } from \"react\";\n\nimport {\n  CommandBar,\n  ICommandBarItemProps,\n  CommandButton,\n  Checkbox,\n  IIconProps,\n} from \"@fluentui/react\";\n\nexport interface ToolBarProps {\n  onMinifyClick: () => void;\n  onPrettifyClick: () => void;\n  onClearClick: () => void;\n  onAutoPrettifyChange: () => void;\n  onDownloadClick: () => void;\n  onUploadClick: (fileContent: File) => void;\n  onFixClick: () => void;\n  isAutoPrettifyOn: boolean;\n  isValidJson: boolean;\n}\n\ninterface FileUploaderProps {\n  onFileHandle: (fileContent: File) => void;\n}\n\n// Need to fix: hover is not working\nexport const FileUploader: React.FC<FileUploaderProps> = ({ onFileHandle }) => {\n  const inputFileRef = useRef<HTMLInputElement>(null);\n\n  const handleUploadClick = () => {\n    if (inputFileRef.current) {\n      // upload the same file\n      inputFileRef.current.value = \"\";\n      inputFileRef.current.click();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) return;\n    const fileUploaded = e.target.files[0];\n    onFileHandle(fileUploaded);\n  };\n\n  const uploadIcon: IIconProps = {\n    iconName: \"Upload\",\n  };\n\n  return (\n    <>\n      <CommandButton\n        iconProps={uploadIcon}\n        text=\"Upload\"\n        onClick={handleUploadClick}\n      />\n      <input\n        ref={inputFileRef}\n        style={{ display: \"none\" }}\n        onChange={handleChange}\n        type=\"file\"\n        accept=\"application/json\"\n      />\n    </>\n  );\n};\n\nexport const ToolBar: React.FC<ToolBarProps> = ({\n  onMinifyClick,\n  onPrettifyClick,\n  isAutoPrettifyOn,\n  onAutoPrettifyChange,\n  onClearClick,\n  onDownloadClick,\n  onUploadClick,\n  onFixClick,\n  isValidJson,\n}) => {\n  const leftItems: ICommandBarItemProps[] = [\n    {\n      key: \"upload\",\n      onRender: () => <FileUploader onFileHandle={onUploadClick} />,\n    },\n    {\n      key: \"download\",\n      text: \"Download\",\n      ariaLabel: \"Grid view\",\n      iconProps: { iconName: \"Download\" },\n      onClick: onDownloadClick,\n      disabled: !isValidJson,\n    },\n    {\n      key: \"clear\",\n      text: \"Clear\",\n      iconProps: { iconName: \"Delete\" },\n      onClick: onClearClick,\n    },\n    {\n      key: \"fix\",\n      text: \"Fix\",\n      iconProps: { iconName: \"DeveloperTools\" },\n      onClick: onFixClick,\n      disabled: isValidJson,\n    },\n    {\n      key: \"minify\",\n      text: \"Minify\",\n      iconProps: { iconName: \"MinimumValue\" },\n      onClick: onMinifyClick,\n      disabled: !isValidJson || isAutoPrettifyOn,\n    },\n    {\n      key: \"prettify\",\n      text: \"Prettify\",\n      iconProps: { iconName: \"Code\" },\n      onClick: onPrettifyClick,\n      disabled: !isValidJson || isAutoPrettifyOn,\n    },\n    {\n      key: \"auto-prettify\",\n      onRender: () => (\n        <CommandButton>\n          <Checkbox\n            label=\"Auto Prettify\"\n            onChange={onAutoPrettifyChange}\n            checked={isAutoPrettifyOn}\n          />\n        </CommandButton>\n      ),\n    },\n  ];\n\n  return (\n    <CommandBar\n      styles={{\n        root: {\n          alignItems: \"center\",\n          // borderTop: \"1px solid rgb(237, 235, 233)\",\n        },\n      }}\n      items={leftItems}\n      ariaLabel=\"json content commands\"\n    />\n  );\n};\n","import { v4 as uuid } from \"uuid\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const downloadJsonFile = async (jsonString: string) => {\n  const fileName = uuid();\n  // Set the HREF to a Blob representation of the data to be downloaded\n  const blob = new Blob([jsonString], { type: \"application/json\" });\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n    // for IE\n    window.navigator.msSaveOrOpenBlob(blob, fileName);\n  } else {\n    // for Non-IE (chrome, firefox etc.)\n\n    try {\n      // create an invisible A element\n      const link = document.createElement(\"a\");\n      link.style.display = \"none\";\n      document.body.appendChild(link);\n\n      const href = await window.URL.createObjectURL(blob);\n      // blob ready, download it\n      link.href = href;\n      link.download = `${fileName}.json`;\n\n      // trigger the download by simulating click\n      link.click();\n\n      // cleanup\n      window.document.body.removeChild(link);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(\"Error: fail to download a file.\");\n    }\n  }\n};\n","/**\n * Minify a Json string\n */\nexport const minifyJsonString = (jsonString: string): string => {\n  try {\n    return JSON.stringify(JSON.parse(jsonString), null);\n  } catch (err) {\n    return jsonString;\n  }\n};\n\n/**\n * Prettify/Format Json string\n */\nexport const prettifyJsonString = (jsonString: string): string => {\n  try {\n    return JSON.stringify(JSON.parse(jsonString), null, \"\\t\");\n  } catch (err) {\n    return jsonString;\n  }\n};\n\nexport const parseJsonSchemaString = (\n  jsonString: string\n): Record<string, unknown> => {\n  try {\n    return JSON.parse(jsonString);\n  } catch (err) {\n    // try to throw a more detailed error message using validate\n    // validateString(jsonString);\n    // rethrow the original error\n    return {};\n  }\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { Stack, IStackStyles } from \"@fluentui/react\";\nimport Editor, {\n  useMonaco,\n  BeforeMount,\n  OnMount,\n  OnValidate,\n} from \"@monaco-editor/react\";\nimport dirtyJson from \"dirty-json\";\nimport * as Monaco from \"monaco-editor/esm/vs/editor/editor.api\";\n\nimport { useToggle } from \"../../hooks\";\nimport { ErrorMessageBar } from \"./components/error-message-bar\";\nimport { TitleBar } from \"./components/title-bar\";\nimport { ToolBar } from \"./components/tool-bar\";\nimport { BorderLine } from \"./styles\";\nimport {\n  downloadJsonFile,\n  minifyJsonString,\n  prettifyJsonString,\n  parseJsonSchemaString,\n} from \"./utils\";\n\nconst stackStyles: IStackStyles = {\n  root: {\n    height: \"100%\",\n    borderTop: BorderLine,\n    borderRight: BorderLine,\n    borderBottom: BorderLine,\n  },\n};\n\ninterface JSONEditorProps {\n  defaultValue?: string;\n  schemaValue?: string;\n  title?: string;\n  path?: string;\n  onChange?: (value: string) => void;\n}\n\ninterface RefObject extends Monaco.editor.ICodeEditor {\n  _domElement?: HTMLElement;\n}\n\nexport const JSONEditor: React.FC<JSONEditorProps> = ({\n  defaultValue,\n  schemaValue,\n  title,\n  path = \"\",\n  onChange,\n}): JSX.Element => {\n  const monaco = useMonaco();\n  const [errors, setErrors] = useState<string[]>([]);\n  const [isAutoPrettifyOn, toggleAutoPrettifyOn] = useToggle(false);\n\n  const [isValidJson, setIsValidJson] = useState<boolean>(false);\n  const editorRef = useRef<RefObject | null>(null);\n\n  const updateEditorLayout = useCallback(() => {\n    // Type BUG: editor.IDimension.width & editor.IDimension.height should be \"number\"\n    // but it needs to have \"auto\" otherwise layout can't be updated;\n    // eslint-disable-next-line\n    const editor: any = editorRef.current;\n    if (!editor) return;\n    // Initialize layout's width and height\n    editor.layout({\n      width: \"auto\",\n      height: \"auto\",\n    });\n    // eslint-disable-next-line\n    const editorEl = editor._domElement;\n    if (!editorEl) return;\n    const { width, height } = editorEl.getBoundingClientRect();\n    // update responsive width and height\n    editor.layout({\n      width,\n      height,\n    });\n  }, []);\n\n  const handleJsonSchemasUpdate = useCallback(() => {\n    monaco?.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      schemas: schemaValue\n        ? [\n            {\n              uri: window.location.href, // id of the first schema\n              fileMatch: [\"*\"], // associate with our model\n              schema: {\n                ...parseJsonSchemaString(schemaValue),\n              },\n            },\n          ]\n        : undefined,\n    });\n  }, [schemaValue, monaco]);\n\n  const handleEditorPrettify = useCallback(() => {\n    editorRef.current?.getAction(\"editor.action.formatDocument\").run();\n  }, []);\n\n  const handleEditorUpdateValue = useCallback((value?: string) => {\n    const editor = editorRef.current;\n    if (!editor) return;\n    editor.setValue(value || \"\");\n    value && editor.getAction(\"editor.action.formatDocument\").run();\n  }, []);\n\n  const handleClearClick = () => editorRef.current?.setValue(\"\");\n\n  const handleEditorWillMount: BeforeMount = () => handleJsonSchemasUpdate();\n\n  const handleEditorDidMount: OnMount = (editor) => {\n    editorRef.current = editor;\n\n    editor.getModel()?.updateOptions({ tabSize: 2, insertSpaces: false });\n    updateEditorLayout();\n\n    window.addEventListener(\"resize\", () => {\n      // automaticLayout isn't working\n      // https://github.com/suren-atoyan/monaco-react/issues/89#issuecomment-666581193\n      // clear current layout\n      updateEditorLayout();\n    });\n\n    // need to use formatted prettify json string\n    defaultValue && handleEditorUpdateValue(prettifyJsonString(defaultValue));\n  };\n\n  useEffect(() => {\n    handleEditorUpdateValue(defaultValue);\n  }, [defaultValue, handleEditorUpdateValue]);\n\n  useEffect(() => {\n    handleJsonSchemasUpdate();\n  }, [schemaValue, handleJsonSchemasUpdate]);\n\n  useEffect(() => {\n    isAutoPrettifyOn && handleEditorPrettify();\n  }, [isAutoPrettifyOn, handleEditorPrettify]);\n\n  const handleEditorValidation: OnValidate = useCallback((markers) => {\n    const errorMessage = markers.map(\n      ({ startLineNumber, message }) => `line ${startLineNumber}: ${message}`\n    );\n    const hasContent = editorRef.current?.getValue();\n    const hasError: boolean = errorMessage.length > 0;\n    setIsValidJson(!!hasContent && !hasError);\n    setErrors(errorMessage);\n  }, []);\n\n  const handleMinifyClick = () => {\n    const editor = editorRef.current;\n    if (!editor) return;\n    const value = editor.getValue();\n    const minifiedValue = minifyJsonString(value);\n    editor.setValue(minifiedValue);\n  };\n\n  const handleUploadClick = (file: File) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      const result = fileReader.result as string;\n      handleEditorUpdateValue(result);\n    };\n    fileReader.readAsText(file);\n  };\n\n  const handleDownloadClick = () => {\n    const value = editorRef.current?.getValue();\n    value && downloadJsonFile(value);\n  };\n\n  const handleEditorChange = useCallback(\n    (value) => {\n      isAutoPrettifyOn && handleEditorPrettify();\n      onChange && onChange(value);\n    },\n    [isAutoPrettifyOn, handleEditorPrettify, onChange]\n  );\n\n  const handleFixClick = () => {\n    const editor = editorRef.current;\n    const value = editor && editor.getValue();\n    const fixedValue = value && dirtyJson.parse(value);\n    const formattedValue =\n      fixedValue && prettifyJsonString(JSON.stringify(fixedValue));\n    editor && editor.setValue(formattedValue);\n  };\n\n  return (\n    <Stack styles={stackStyles}>\n      {title && (\n        <Stack.Item>\n          <TitleBar title={title} />\n        </Stack.Item>\n      )}\n      <Stack.Item>\n        <ToolBar\n          isValidJson={isValidJson}\n          isAutoPrettifyOn={isAutoPrettifyOn}\n          onAutoPrettifyChange={toggleAutoPrettifyOn}\n          onClearClick={handleClearClick}\n          onDownloadClick={handleDownloadClick}\n          onMinifyClick={handleMinifyClick}\n          onPrettifyClick={handleEditorPrettify}\n          onUploadClick={handleUploadClick}\n          onFixClick={handleFixClick}\n        />\n      </Stack.Item>\n      <Stack styles={stackStyles}>\n        <Stack.Item\n          grow\n          align=\"stretch\"\n          style={{\n            height: `calc(100% - 20vh)`,\n          }}\n        >\n          <Editor\n            language=\"json\"\n            path={path}\n            options={{\n              automaticLayout: true,\n              autoClosingBrackets: \"always\",\n              autoClosingQuotes: \"always\",\n              formatOnPaste: true,\n              formatOnType: true,\n              scrollBeyondLastLine: false,\n            }}\n            onMount={handleEditorDidMount}\n            onChange={handleEditorChange}\n            beforeMount={handleEditorWillMount}\n            onValidate={handleEditorValidation}\n          />\n        </Stack.Item>\n        <Stack.Item\n          style={{\n            height: `20vh`,\n          }}\n        >\n          <ErrorMessageBar errors={errors} />\n        </Stack.Item>\n      </Stack>\n    </Stack>\n  );\n};\n","export const validFormattedJsonInput = `{\n\t\"name\": \"Sujin Lee\",\n\t\"email\": \"sujinlee.me@gmail.com\",\n\t\"date_of_birth\": \"1990-01-01\"\n}`;\n\nexport const invalidFormattedJsonInput = `\n\t\"name\": \"Sujin Lee\",\n\t\"email\": \"sujinlee.me@gmail.com\",\n\t\"date_of_birth\": \"1990-01-01\"\n}`;\n\nexport const validMinifiedJsonInput = `{\"name\":\"Sujin Lee\",\"email\":\"sujinlee.me@gmail.com\",\"date_of_birth\":\"1990-01-01\"}`;\n\nexport const invalidMinifiedJsonInput = `name\":\"Sujin Lee\",\"email\":\"sujinlee.me@gmail.com\",\"date_of_birth\":\"1990-01-01\"}`;\n\nexport const schema = `{ \"name\": \"sample schema\", \"type\": \"object\", \"properties\": { \"name\": { \"title\": \"Name\", \"type\": \"string\", \"description\": \"Users full name supporting unicode but no emojis.\", \"maxLength\": 20 }, \"email\": { \"title\": \"Email\", \"description\": \"Like a postal address but for computers.\", \"type\": \"string\", \"format\": \"email\" }, \"date_of_birth\": { \"title\": \"Date Of Birth\", \"type\": \"string\", \"description\": \"Date of uses birth in the one and only date standard: ISO 8601.\", \"format\": \"date\", \"example\": \"1990–12–28\" } }, \"required\": [ \"name\" ] }`;\n\nexport const SampleData = {\n  jsonInput: validMinifiedJsonInput,\n  schema,\n};\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nimport { initializeIcons } from \"@fluentui/react/lib/Icons\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// Library icon registration\ninitializeIcons();\n"],"sourceRoot":""}